{"version":3,"sources":["utils/FormatTime.js","utils/FetchWeatherData.js","utils/CarouselSettings.js","utils/MiscTrackEvents.js","utils/WeatherBackground.js","components/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherIcon.js","utils/TemperatureConvert.js","components/weather/WeatherIconComponent.js","components/weather/InfoDetailComponent.js","utils/AssetsSrcURL.js","utils/SpeedConvert.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","components/weather/AlertComponent.js","containers/weather-forecast/WeatherForecastContainer.js"],"names":["FormatTime","timestamp","timezone","formatType","moment","tz","format","axiosRetry","axios","retryDelay","exponentialDelay","retries","getURL","latlong","API_URL","FetchWeatherData","a","weatherCurrent","weatherForecast","alerts","error","isValid","get","weatherData","data","currently","sunrise","daily","sunriseTime","sunset","sunsetTime","timeFrames","hourly","forEach","hour","date","time","Object","keys","includes","push","days","day","alert","console","CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","emitGA","value","Event","category","action","label","formatTime","isDawnDusk","currentTime","currentHour","split","timeHour","Number","getWeatherBackground","icon","currentMinutes","sunriseHour","sunriseMinutes","sunsetHour","sunsetMinutes","getType","dawn","dusk","InfoComponent","address","updateFavorites","useContext","AddressContext","useState","setDate","setTime","emitFavoriteCityGA","favoriteCity","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","cityName","length","datetimeSetter","dateObj","isUndefined","current","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","isEmpty","title","onClick","favorites","duplicates","removeIndex","findIndex","newFavorites","splice","setItem","stringify","updatedFavorites","getWindDirection","deg","getWeatherIcon","fToC","temp","Math","round","WeatherIconComponent","up","right","down","left","InfoDetailComponent","WeatherUnitContext","weatherUnit","updateWeatherUnit","unitClick","unit","computedTempValue","startsWith","summary","src","alt","humidity","windSpeed","computedSpeedValue","windBearing","CurrentWeatherContainer","ErrorBoundaryContainer","LoaderComponent","DayComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","selectedDay","TimeframeComponent","Timeframe","ForecastContainer","setSelectedDay","selectedDayIndex","setSelectedDayIndex","updateSelectedDay","today","selectedDayIndexHandler","indexOf","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","key","daySelectHandler","AlertComponent","expires","uri","startTime","endTime","severity","regions","severityColor","role","region","href","target","rel","WeatherForecastContainer","imageBorder","borderTopLeftRadius","borderTopRightRadius","showAlerts","setShowAlerts","style","background"],"mappings":"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","file":"static/js/1.2eba0e1b.chunk.js","sourcesContent":["import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Number} timestamp\r\n * @param {String} timezone\r\n * @param {String} formatType (moment format types)\r\n */\r\nconst FormatTime = (timestamp, timezone, formatType) => {\r\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\r\n}\r\n\r\nexport default FormatTime\r\n","import axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport FormatTime from './FormatTime'\r\nimport API_URL from './API'\r\nimport isValid from './ValidityChecker'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay, retries: 1})\r\n\r\nconst getURL = (latlong) => {\r\n  return `${API_URL}/forecast?latlong=${latlong}`\r\n}\r\n\r\n/**\r\n * @param {String} latlong (-43.53333,172.63333)\r\n */\r\nconst FetchWeatherData = async ({latlong}) => {\r\n  let weatherCurrent = {}\r\n  let weatherForecast = {}\r\n  let alerts = []\r\n  let error = null\r\n\r\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\r\n  if (isValid(latlong)) {\r\n    try {\r\n      const weatherData = (await axios.get(getURL(latlong))).data\r\n      if (isValid(weatherData)) {\r\n        // NOTE: add timezone property to current, days, and timeFrame data to use it later for\r\n        // displaying weatherIcon with day or night variants specific to location timezone\r\n        // parsing sunriseTime & sunsetTime according to the timezone\r\n        const timezone = weatherData.timezone\r\n\r\n        weatherCurrent = {\r\n          timezone,\r\n          ...weatherData.currently,\r\n          sunrise: weatherData.daily.data[0].sunriseTime,\r\n          sunset: weatherData.daily.data[0].sunsetTime,\r\n        }\r\n\r\n        // group 168 hours into days as keys in timeFrames\r\n        // group days and timeFrames into weatherForecast\r\n        const timeFrames = {}\r\n        // create date as the keys for timeFrame in timeFrames\r\n        // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\r\n        weatherData.hourly.data.forEach((hour) => {\r\n          const date = FormatTime(hour.time, timezone, 'MM/DD/YYYY')\r\n          if (Object.keys(timeFrames).includes(date)) {\r\n            timeFrames[date].push({timezone, ...hour})\r\n          } else {\r\n            timeFrames[date] = [{timezone, ...hour}]\r\n          }\r\n        })\r\n        const days = {}\r\n        // create date as the keys for the day in days\r\n        // i.e days: {'02/28/2020': {...day}, ...}\r\n        weatherData.daily.data.forEach((day) => {\r\n          const date = FormatTime(day.time, timezone, 'MM/DD/YYYY')\r\n          // since there will be unique day objects in days\r\n          // just create a 'date' key with day object as value for as many days\r\n          days[date] = {timezone, ...day}\r\n        })\r\n\r\n        weatherForecast = {timeFrames, days}\r\n\r\n        if (isValid(weatherData.alerts)) {\r\n          weatherData.alerts.forEach((alert) => {\r\n            alerts.push({\r\n              timezone,\r\n              ...alert,\r\n            })\r\n          })\r\n        }\r\n      }\r\n    } catch (err) {\r\n      error = err\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n  return {\r\n    weatherCurrent,\r\n    weatherForecast,\r\n    alerts,\r\n    error,\r\n  }\r\n}\r\n\r\nexport default FetchWeatherData\r\n","// modify carousel settings for timeframe and favorites component\r\n/**\r\n * time or favorite\r\n * @param {String} type\r\n * resolution can be mobile or tablet\r\n * @param {*} resolution\r\n */\r\nconst CarouselSettings = (type, resolution = 'mobile') => ({\r\n  width: '100%',\r\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  initialSlideHeight: type === 'time' ? 100 : 200,\r\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\r\n  speed: 1000,\r\n  easing: 'easeSinInOut',\r\n  defaultControlsConfig: {\r\n    prevButtonStyle: {\r\n      display: 'none',\r\n    },\r\n    nextButtonStyle: {\r\n      display: 'none',\r\n    },\r\n    pagingDotsStyle: {\r\n      fill: '#cfd9df',\r\n      display: 'flex',\r\n      position: 'relative',\r\n      top: type === 'day' ? '25px' : '35px',\r\n      margin: '10px 5px',\r\n    },\r\n  },\r\n})\r\n\r\nexport default CarouselSettings\r\n","import {Event} from './ReactAnalytics'\r\n\r\n/**\r\n * @param {String} type\r\n * @param {String} value\r\n */\r\nconst emitGA = (type, value) => {\r\n  switch (type) {\r\n    case 'favorites':\r\n      // track selectedFavorite to GA\r\n      Event({\r\n        category: 'Favorites',\r\n        action: 'Select Favorite',\r\n        label: value\r\n      })\r\n      break\r\n    case 'explore-life':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Explore Life',\r\n        action: 'Click on Explore Life',\r\n        label: value\r\n      })\r\n      break\r\n    case 'powered-by':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Powered By',\r\n        action: 'Click on Powered By',\r\n        label: value\r\n      })\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default emitGA\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * format timestamp to time in the form of \"H:mm\" where H -> 0 - 23 & mm -> 00 - 59\r\n * @param {String} type (sunrise | sunset | hour)\r\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst formatTime = (type, time, timezone) => {\r\n  if (type === 'sunrise' || type === 'sunset') {\r\n    return moment(time * 1000)\r\n      .tz(timezone)\r\n      .format('H:mm')\r\n  }\r\n  return moment().tz(timezone).format('H:mm')\r\n}\r\n\r\n/**\r\n * returns day or night based on the comparison of currentTime with sunrise and sunset times\r\n * @param {String} currentTime\r\n * @param {String} sunriseTime\r\n * @param {String} sunsetTime\r\n */\r\nconst getType = (currentTime, sunriseTime, sunsetTime) => {\r\n  const [currentHour, currentMinutes] = currentTime.split(':')\r\n  const [sunriseHour, sunriseMinutes] = sunriseTime.split(':')\r\n  const [sunsetHour, sunsetMinutes] = sunsetTime.split(':')\r\n  if (currentHour === sunriseHour || currentHour === sunsetHour) {\r\n    return Number(currentMinutes) >= Number(sunriseMinutes) ||\r\n      Number(currentMinutes) < Number(sunsetMinutes)\r\n      ? 'day'\r\n      : 'night'\r\n  } else {\r\n    return Number(currentHour) > Number(sunriseHour) &&\r\n      Number(currentHour) < Number(sunsetHour)\r\n      ? 'day'\r\n      : 'night'\r\n  }\r\n}\r\n\r\n/**\r\n * checks if it is dawn (sunrise) or dusk (sunset)\r\n * @param {*} currentTime\r\n * @param {*} time (sunriseTime for checking dawn & sunsetTime for checking dusk)\r\n */\r\nconst isDawnDusk = (currentTime, time) => {\r\n  const currentHour = currentTime.split(':')[0]\r\n  const timeHour = time.split(':')[0]\r\n  return (\r\n    Number(currentHour) === Number(timeHour) - 1 ||\r\n    Number(currentHour) === Number(timeHour)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent)\r\n * @param {String} icon (ex- cloudy)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getWeatherBackground = (data) => {\r\n  const {icon, timezone, sunrise, sunset} = data\r\n  // format sunrise and sunset in weatherCurrent of data into hour and minutes\r\n  const sunriseTime = formatTime('sunrise', sunrise, timezone)\r\n  const sunsetTime = formatTime('sunset', sunset, timezone)\r\n  const currentTime = formatTime('hour', 0, timezone)\r\n  // get the type like day or night\r\n  const type = getType(currentTime, sunriseTime, sunsetTime)\r\n  // check for dawn scenario before sunrise hour\r\n  const dawn = isDawnDusk(currentTime, sunriseTime)\r\n  // check for dusk scenario before sunset hour\r\n  const dusk = isDawnDusk(currentTime, sunsetTime)\r\n\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'clear-day':\r\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day'\r\n      case 'clear-night':\r\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night'\r\n      case 'rain':\r\n        return `overcast-${type}`\r\n      case 'snow':\r\n        return `overcast-${type}`\r\n      case 'sleet':\r\n        return `overcast-${type}`\r\n      case 'wind':\r\n        return `cloudy-${type}`\r\n      case 'fog':\r\n        return `overcast-${type}`\r\n      case 'cloudy':\r\n        return `cloudy-${type}`\r\n      case 'partly-cloudy-day':\r\n        return `cloudy-${type}`\r\n      case 'partly-cloudy-night':\r\n        return `cloudy-${type}`\r\n      case 'hail':\r\n        return `overcast-${type}`\r\n      case 'thunderstorm':\r\n        return 'thunderstorm'\r\n      case 'tornado':\r\n        return 'tornado'\r\n      default:\r\n        return 'clear-day'\r\n    }\r\n  }\r\n  return 'clear-day'\r\n}\r\n\r\nexport default getWeatherBackground\r\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport moment from 'moment-timezone'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FaRegHeart, FaHeart} from 'react-icons/fa'\r\n\r\nconst InfoComponent = ({address, latlong, weatherCurrent}) => {\r\n  const {updateFavorites} = useContext(AddressContext)\r\n  const [date, setDate] = useState('')\r\n  const [time, setTime] = useState('')\r\n\r\n  /**\r\n   * track select favorite click event to GA\r\n   * @param {String} type (add or remove)\r\n   * @param {String} favoriteCity (name)\r\n   */\r\n  const emitFavoriteCityGA = (type, favoriteCity) => {\r\n    Event({\r\n      category: 'Favorite City',\r\n      action: `${type} city`,\r\n      label: favoriteCity,\r\n    })\r\n  }\r\n\r\n  // store formattedDateTime moment date object in the ref and update it for the first api call fetch\r\n  // this ref will be used to update date and time every second without making additional api calls\r\n  const formattedDateTimeRef = useRef()\r\n\r\n  const isBookmarked = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const matched = favorites.filter(\r\n        (favorite) => favorite.address.cityName === address.cityName\r\n      )\r\n      return matched.length > 0\r\n    }\r\n    return false\r\n  }\r\n\r\n  const favoritesHandler = () => {\r\n    // first ever favorite item stored in localStorage\r\n    if (!localStorage.getItem('favorites')) {\r\n      localStorage.setItem('favorites', JSON.stringify([{address, latlong}]))\r\n      emitFavoriteCityGA('add', address.cityName)\r\n      updateFavorites({\r\n        favorites: [{address, latlong}],\r\n      })\r\n    } else {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const duplicates = favorites.filter(\r\n        (favorite) => favorite.address.cityName === address.cityName\r\n      )\r\n      if (!duplicates.length) {\r\n        // add newly added favorite to old favorites\r\n        const updatedFavorites = [...favorites, {address, latlong}]\r\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\r\n        emitFavoriteCityGA('add', address.cityName)\r\n        updateFavorites({\r\n          favorites: updatedFavorites,\r\n        })\r\n      } else {\r\n        // if already favorite is selected\r\n        // remove it from favorites\r\n        const removeIndex = favorites.findIndex(\r\n          (favorite) =>\r\n            favorite.address.cityName === duplicates[0].address.cityName\r\n        )\r\n        if (removeIndex !== -1) {\r\n          const newFavorites = [...favorites]\r\n          newFavorites.splice(removeIndex, 1)\r\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\r\n          emitFavoriteCityGA('remove', address.cityName)\r\n          updateFavorites({\r\n            favorites: newFavorites,\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // format and set date & time based on the dateObj\r\n  const datetimeSetter = (dateObj) => {\r\n    setDate(!isUndefined(dateObj) ? dateObj.format('dddd, MMMM DD, YYYY') : '')\r\n    setTime(!isUndefined(dateObj) ? dateObj.format('h:mm A') : '')\r\n    formattedDateTimeRef.current = dateObj ? dateObj : null\r\n  }\r\n\r\n  useEffect(() => {\r\n    // reset date & time whenever weatherCurrent change\r\n    datetimeSetter(\r\n      moment(weatherCurrent.time * 1000).tz(weatherCurrent.timezone)\r\n    )\r\n\r\n    const dateTimer = setInterval(() => {\r\n      if (weatherCurrent.time) {\r\n        // update date and time every second only when there is a valid timestamp\r\n        const formattedDateTimeObj = moment\r\n          .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\r\n          .add(1, 's')\r\n        datetimeSetter(formattedDateTimeObj)\r\n      }\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(dateTimer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [weatherCurrent])\r\n\r\n  return (\r\n    <div className='flex justify-between items-start'>\r\n      <div className='pt-4 px-4'>\r\n        <p className='font-bold'>{address.cityName}</p>\r\n        <div className='sm:flex-col md:flex md:flex-row font-light'>\r\n          {!isEmpty(date) && !isEmpty(time) ? (\r\n            <Fragment>\r\n              <p>\r\n                {date}\r\n                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\r\n              </p>\r\n              <p>{time}</p>\r\n            </Fragment>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        className='mt-6 mr-6 cursor-pointer text-2xl'\r\n        title={\r\n          isBookmarked()\r\n            ? 'Remove this city from favorites'\r\n            : 'Favorite this city'\r\n        }\r\n        onClick={favoritesHandler}>\r\n        {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoComponent\r\n\r\nInfoComponent.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n}\r\n","/**\r\n * @param {Number} deg\r\n */\r\nconst getWindDirection = deg => {\r\n  if (deg >= 0 && deg <= 45) {\r\n    return 'up'\r\n  } else if (deg >= 46 && deg <= 90) {\r\n    return 'up-right'\r\n  } else if (deg >= 91 && deg <= 135) {\r\n    return 'right'\r\n  } else if (deg >= 136 && deg <= 180) {\r\n    return 'down-right'\r\n  } else if (deg >= 181 && deg <= 225) {\r\n    return 'down'\r\n  } else if (deg >= 226 && deg <= 270) {\r\n    return 'down-left'\r\n  } else if (deg >= 271 && deg <= 315) {\r\n    return 'left'\r\n  } else {\r\n    return 'up-left'\r\n  }\r\n}\r\n\r\nexport default getWindDirection\r\n","import FormatTime from './FormatTime'\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent, Timeframe, day)\r\n */\r\nconst getWeatherIcon = (data) => {\r\n  const {icon, time, timezone} = data\r\n  const hour = FormatTime(time, timezone, 'H')\r\n  const type = hour >= 6 && hour <= 18 ? 'day' : 'night'\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'clear-day':\r\n        return 'day'\r\n      case 'clear-night':\r\n        return 'night'\r\n      case 'rain':\r\n        return `${type}-rain`\r\n      case 'snow':\r\n        return `${type}-snow`\r\n      case 'sleet':\r\n        return 'sleet'\r\n      case 'wind':\r\n        return `${type}-cloudy`\r\n      case 'fog':\r\n        return `${type}-cloudy`\r\n      case 'cloudy':\r\n        return 'cloudy'\r\n      case 'partly-cloudy-day':\r\n        return 'day-cloudy'\r\n      case 'partly-cloudy-night':\r\n        return 'night-cloudy'\r\n      case 'hail':\r\n        return 'hail'\r\n      case 'thunderstorm':\r\n        return 'thunder'\r\n      case 'tornado':\r\n        return 'wi-tornado'\r\n      default:\r\n        return 'wi-na'\r\n    }\r\n  }\r\n  return 'wi-na'\r\n}\r\n\r\nexport default getWeatherIcon\r\n","const fToC = temp => {\r\n  return Math.round(((temp - 32) * 5) / 9)\r\n}\r\n\r\nconst cToF = temp => {\r\n  return Math.round((temp * 9) / 5 + 32)\r\n}\r\n\r\nexport {fToC, cToF}\r\n","import React from 'react'\r\nimport {\r\n  WiDirectionUp,\r\n  WiDirectionUpRight,\r\n  WiDirectionRight,\r\n  WiDirectionDownRight,\r\n  WiDirectionDown,\r\n  WiDirectionDownLeft,\r\n  WiDirectionLeft,\r\n  WiDirectionUpLeft,\r\n  WiDayFog,\r\n  WiNightFog,\r\n  WiDayCloudyWindy,\r\n  WiNightAltCloudyWindy,\r\n  WiTornado,\r\n  WiNa,\r\n  WiSunrise,\r\n  WiSunset\r\n} from 'react-icons/wi'\r\n\r\nconst WeatherIconComponent = ({type}) => {\r\n  const ICON_TYPES = {\r\n    'wi-day-fog': <WiDayFog />,\r\n    'wi-night-fog': <WiNightFog />,\r\n    'wi-day-windy': <WiDayCloudyWindy />,\r\n    'wi-night-windy': <WiNightAltCloudyWindy />,\r\n    'wi-tornado': <WiTornado />,\r\n    'wi-na': <WiNa />,\r\n    up: <WiDirectionUp />,\r\n    'up-right': <WiDirectionUpRight />,\r\n    right: <WiDirectionRight />,\r\n    'down-right': <WiDirectionDownRight />,\r\n    down: <WiDirectionDown />,\r\n    'down-left': <WiDirectionDownLeft />,\r\n    left: <WiDirectionLeft />,\r\n    'up-left': <WiDirectionUpLeft />,\r\n    sunrise: <WiSunrise />,\r\n    sunset: <WiSunset />\r\n  }\r\n\r\n  return ICON_TYPES[type] || <WiNa />\r\n}\r\n\r\nexport default WeatherIconComponent\r\n","import React, {Fragment, useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport getWindDirection from '../../utils/WindDirection'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport {mToK} from '../../utils/SpeedConvert'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FiPercent} from 'react-icons/fi'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\n\r\nconst InfoDetailComponent = ({weatherCurrent}) => {\r\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\r\n  const unitClick = (unit) => {\r\n    // track event to GA\r\n    Event({\r\n      category: 'Weather Unit',\r\n      action: 'Set Unit',\r\n      label: unit,\r\n    })\r\n    updateWeatherUnit(unit)\r\n  }\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = (type) => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(weatherCurrent[`${type}`])\r\n      : fToC(weatherCurrent[`${type}`])\r\n  }\r\n\r\n  const computedSpeedValue = () => {\r\n    return weatherUnit === 'F'\r\n      ? `${Math.round(weatherCurrent.windSpeed)} mph`\r\n      : `${mToK(weatherCurrent.windSpeed)} kmph`\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-4'>\r\n        <div className='flex-col sm:w-full lg:w-1/2'>\r\n          <div className='flex flex-row justify-center sm:justify-start sm:items-center'>\r\n            <div className='flex flex-col justify-center items-center'>\r\n              <div>\r\n                {getWeatherIcon(weatherCurrent).startsWith('wi') ? (\r\n                  <p\r\n                    className='text-6xl sm:mx-2 mt-2'\r\n                    title={weatherCurrent.summary}>\r\n                    {\r\n                      <WeatherIconComponent\r\n                        type={getWeatherIcon(weatherCurrent)}\r\n                      />\r\n                    }\r\n                  </p>\r\n                ) : (\r\n                  <img\r\n                    src={`${AssetsSrcURL}/weather/${getWeatherIcon(\r\n                      weatherCurrent\r\n                    )}.svg`}\r\n                    alt='icon'\r\n                    title={weatherCurrent.summary}\r\n                    className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\r\n                  />\r\n                )}\r\n              </div>\r\n              <p className='hidden sm:flex sm:flex-no-wrap font-medium -mt-2 ml-3 capitalize'>\r\n                {weatherCurrent.summary}\r\n              </p>\r\n            </div>\r\n            <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\r\n              <div>\r\n                <span className='text-6xl font-bold'>\r\n                  {computedTempValue('temperature')}\r\n                </span>\r\n              </div>\r\n              <p className='-mt-8 text-3xl'>\r\n                <sup>o</sup>\r\n              </p>\r\n              <div className='-mt-10 mx-2 text-xl'>\r\n                <span\r\n                  className={`cursor-pointer ${\r\n                    weatherUnit === 'C'\r\n                      ? 'font-bold border-b border-light'\r\n                      : 'font-light opacity-75'\r\n                  }`}\r\n                  title='Celcius'\r\n                  onClick={() => unitClick('C')}>\r\n                  C\r\n                </span>\r\n                <span className={`mx-1 opacity-25`}>|</span>\r\n                <span\r\n                  className={`cursor-pointer ${\r\n                    weatherUnit === 'F'\r\n                      ? 'font-bold border-b border-light'\r\n                      : 'font-light opacity-75'\r\n                  }`}\r\n                  title='Fahrenheit'\r\n                  onClick={() => unitClick('F')}>\r\n                  F\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* weather info */}\r\n        <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\r\n          <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\r\n            {weatherCurrent.summary}\r\n          </p>\r\n          <div className='text-sm sm:text-lg ml-8 mt-3 sm:mt-0'>\r\n            <div className='flex flex-row sm:my-2'>\r\n              <p className='font-light'>Humidity:</p>&nbsp;\r\n              <p className='mx-1 font-bold'>\r\n                {Math.round(weatherCurrent.humidity * 100)}\r\n              </p>\r\n              <p className='text-sm mt-1'>\r\n                <FiPercent />\r\n              </p>\r\n            </div>\r\n            <div className='flex items-center sm:my-2'>\r\n              <p>\r\n                <span className='font-light'>Wind:</span>&nbsp;\r\n                <span className='font-bold'>{computedSpeedValue()} </span>\r\n              </p>\r\n              <p className='text-3xl'>\r\n                {\r\n                  <WeatherIconComponent\r\n                    type={getWindDirection(weatherCurrent.windBearing)}\r\n                  />\r\n                }\r\n              </p>\r\n            </div>\r\n            <p>\r\n              <span className='font-light sm:my-2'>Feels like:</span>&nbsp;\r\n              <span className='font-bold'>\r\n                {computedTempValue('apparentTemperature')}\r\n              </span>\r\n              <sup>o</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InfoDetailComponent\r\n\r\nInfoDetailComponent.propTypes = {\r\n  weatherCurrent: PropTypes.object,\r\n}\r\n","// this URL points to the root directory of the app based on dev or prod environment\r\nconst isProduction = process.env.NODE_ENV === 'production'\r\nexport default isProduction ? '.' : './weather-react'\r\n","const mToK = speed => {\r\n  return Math.round(speed * 1.6)\r\n}\r\n\r\nconst kToM = speed => {\r\n  return Math.round(speed * 0.6)\r\n}\r\n\r\nexport {mToK, kToM}\r\n","import React, {Fragment} from 'react'\r\nimport InfoComponent from '../../components/weather/InfoComponent'\r\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\r\nimport LoaderComponent from './../../components/loader/LoaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst CurrentWeatherContainer = ({weatherCurrent, address, latlong}) => {\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {address && weatherCurrent ? (\r\n          <div>\r\n            <InfoComponent\r\n              address={address}\r\n              latlong={latlong}\r\n              weatherCurrent={weatherCurrent}\r\n            />\r\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\r\n          </div>\r\n        ) : (\r\n          <LoaderComponent />\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default CurrentWeatherContainer\r\n\r\nCurrentWeatherContainer.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\n\r\nconst DayComponent = (props) => {\r\n  const {day, index, selectedIndex} = props\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be 'High' or 'Low'\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = (type) => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(day[`temperature${type}`])\r\n      : fToC(day[`temperature${type}`])\r\n  }\r\n\r\n  // emit event to forecastContainer\r\n  const selectedDay = () => {\r\n    props.selectedDay({day})\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`md:hover:bg-${colorTheme} md:hover:text-${theme} items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer  ${\r\n        index === selectedIndex ? `bg-${colorTheme} text-${theme}` : ''\r\n      }`}\r\n      onClick={selectedDay}>\r\n      <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\r\n        <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-semibold'>\r\n          {FormatTime(day.time, day.timezone, 'ddd')}\r\n        </p>\r\n        {/* icon */}\r\n        <div className='flex w-1/6 sm:w-full'>\r\n          {getWeatherIcon(day).startsWith('wi') ? (\r\n            <p\r\n              className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\r\n              title={day.summary}>\r\n              <WeatherIconComponent type={getWeatherIcon(day)} />\r\n            </p>\r\n          ) : (\r\n            <img\r\n              src={`${AssetsSrcURL}/weather/${getWeatherIcon(day)}.svg`}\r\n              alt='icon'\r\n              title={day.summary}\r\n              className='sm:-mt-2 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\r\n            />\r\n          )}\r\n        </div>\r\n        {/* high & low */}\r\n        <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\r\n          <p className='mx-2 text-xs sm:text-sm'>\r\n            {computedTempValue('High')}\r\n            <sup>o</sup>\r\n          </p>\r\n          <p className='mx-2 text-xs'>\r\n            {computedTempValue('Low')}\r\n            <sup>o</sup>\r\n          </p>\r\n        </div>\r\n        {/* sunrise & sunset */}\r\n        <div\r\n          className={`${\r\n            index === selectedIndex ? 'flex' : 'flex'\r\n          } flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p\r\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\r\n              title='sunrise'>\r\n              <WeatherIconComponent type='sunrise' />\r\n            </p>\r\n            <p>{FormatTime(day.sunriseTime, day.timezone, 'h:mm')}</p>\r\n          </div>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p\r\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-1'\r\n              title='sunset'>\r\n              <WeatherIconComponent type='sunset' />\r\n            </p>\r\n            <p>{FormatTime(day.sunsetTime, day.timezone, 'HH:mm')}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayComponent\r\n\r\nDayComponent.propTypes = {\r\n  day: PropTypes.object,\r\n  selectedDay: PropTypes.func,\r\n  index: PropTypes.number,\r\n  selectedIndex: PropTypes.number,\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\n\r\nconst TimeframeComponent = ({Timeframe}) => {\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = (type) => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(Timeframe[`${type}`])\r\n      : fToC(Timeframe[`${type}`])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${colorTheme} md:text-light timeframe`}>\r\n      <div>\r\n        {getWeatherIcon(Timeframe).startsWith('wi') ? (\r\n          <p className='text-5xl mt-4' title={Timeframe.summary}>\r\n            <WeatherIconComponent type={getWeatherIcon(Timeframe)} />\r\n          </p>\r\n        ) : (\r\n          <img\r\n            src={`${AssetsSrcURL}/weather/${getWeatherIcon(Timeframe)}.svg`}\r\n            alt='icon'\r\n            title={Timeframe.summary}\r\n            className='w-16 h-16 object-contain'\r\n          />\r\n        )}\r\n      </div>\r\n      <p className='text-base pb-1'>\r\n        {computedTempValue('temperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-xs pb-1'>\r\n        {computedTempValue('apparentTemperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm font-medium'>\r\n        {FormatTime(Timeframe.time, Timeframe.timezone, 'h:mm A')}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeframeComponent\r\n\r\nTimeframeComponent.propTypes = {\r\n  Timeframe: PropTypes.object,\r\n}\r\n","import React, {useState, useEffect, Fragment} from 'react'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport DayComponent from '../../components/weather/DayComponent'\r\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport ErrorComponent from './../../components/error/ErrorComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst ForecastContainer = ({cityName, weatherCurrent, weatherForecast}) => {\r\n  const [selectedDay, setSelectedDay] = useState('')\r\n  const [selectedDayIndex, setSelectedDayIndex] = useState(0)\r\n  const {time, timezone} = weatherCurrent\r\n\r\n  // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\r\n  const updateSelectedDay = async () => {\r\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\r\n    if (!isUndefined(weatherCurrent.time)) {\r\n      const today = FormatTime(time, timezone, 'MM/DD/YYYY')\r\n      // check if today key exist in days\r\n      if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\r\n        setSelectedDay(weatherForecast.days[today] ? today : '')\r\n        selectedDayIndexHandler(weatherForecast.days[today] ? today : '')\r\n      }\r\n    }\r\n  }\r\n\r\n  // find the index of selectedDay in days object\r\n  const selectedDayIndexHandler = selectedDay => {\r\n    const index = Object.keys(weatherForecast.days).indexOf(selectedDay)\r\n    setSelectedDayIndex(index !== -1 ? index : 0)\r\n  }\r\n\r\n  /**\r\n   * day is a date '02/28/2020'\r\n   * @param {String} day\r\n   */\r\n  const daySelectHandler = day => {\r\n    setSelectedDay(day)\r\n    selectedDayIndexHandler(day)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateSelectedDay()\r\n    // eslint-disable-next-line\r\n  }, [weatherForecast])\r\n\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\r\n          <Fragment>\r\n            {/* mobile */}\r\n            <div className='sm:hidden pb-3'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* tablet and above devices */}\r\n            <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time', 'tablet')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* day */}\r\n            <div\r\n              className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\r\n              {Object.keys(weatherForecast.days).map((day, index) => {\r\n                // day is key in weatherForecast.days -> '02/28/2020'\r\n                // index is the position of key -> 0\r\n                return (\r\n                  <DayComponent\r\n                    day={weatherForecast.days[day]}\r\n                    key={index}\r\n                    index={index}\r\n                    selectedIndex={selectedDayIndex}\r\n                    selectedDay={() => daySelectHandler(day)}\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n          </Fragment>\r\n        ) : (\r\n          <div className='mb-3'>\r\n            {isEmpty(weatherForecast.days) ? (\r\n              <ErrorComponent\r\n                errorMessage={'No forecast data available for this city!'}\r\n                showCloseBtn={false}\r\n              />\r\n            ) : (\r\n              <LoaderComponent\r\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default ForecastContainer\r\n\r\nForecastContainer.propTypes = {\r\n  cityName: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n  weatherForecast: PropTypes.object\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {FaExclamationTriangle, FaEye} from 'react-icons/fa'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport isValid from '../../utils/ValidityChecker'\r\n\r\nconst AlertComponent = ({alert}) => {\r\n  const {timezone, title, time, expires, uri} = alert\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  const startTime = FormatTime(time, timezone, 'dddd h:mm A')\r\n  const endTime = FormatTime(expires, timezone, 'dddd h:mm A')\r\n  const severity = alert.severity || 'warning'\r\n  const regions = alert.regions\r\n\r\n  const severityColor = severity === 'warning' ? 'red' : 'orange'\r\n\r\n  return (\r\n    <div className={'flex flex-col justify-center items-center'}>\r\n      <div className={`w-11/12 lg:w-3/4 xl:max-w-5xl`}>\r\n        <div\r\n          className={`bg-${theme} border-t-4 border border-${severityColor}-700 rounded-lg text-${colorTheme} px-3 py-3 shadow-xl`}\r\n          role='alert'>\r\n          <div className='flex'>\r\n            <div className='pt-1 px-2'>\r\n              {severity === 'watch' ? (\r\n                <FaEye className='text-toggle text-lg' title={severity} />\r\n              ) : (\r\n                <FaExclamationTriangle\r\n                  className={`text-${severityColor}-700 text-lg`}\r\n                  title={severity}\r\n                />\r\n              )}\r\n            </div>\r\n            <div className='w-full'>\r\n              <div className='flex flex-col sm:flex-row sm:justify-between sm:items-center'>\r\n                <p className='sm:w-1/2 font-bold capitalize'>\r\n                  {title === 'No Text' ? severity : title}\r\n                </p>\r\n                <p className='sm:w-1/2 sm:text-right font-semibold text-xs'>\r\n                  <span>{startTime}</span>\r\n                  &nbsp;<span>-</span>&nbsp;\r\n                  <span>{endTime}</span>\r\n                </p>\r\n              </div>\r\n              {/* <p className='text-sm lowercase py-1'>{description}</p> */}\r\n              {/* regions */}\r\n              {isValid(regions) ? (\r\n                <p className='text-sm font-medium py-2'>\r\n                  <b>Regions:&nbsp;</b>\r\n                  {regions.map((region, index) => {\r\n                    return (\r\n                      <i key={index}>\r\n                        {region}\r\n                        {index === regions.length - 1 ? '.' : ', '}\r\n                      </i>\r\n                    )\r\n                  })}\r\n                </p>\r\n              ) : null}\r\n              <a\r\n                href={uri}\r\n                target='_blank'\r\n                rel='noreferrer noopener'\r\n                className={`link z-0 text-xs font-medium hover:text-${theme}`}>\r\n                View Details\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlertComponent\r\n","import React, {useContext, Fragment, useState} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport getWeatherBackground from './../../utils/WeatherBackground'\r\nimport CurrentWeatherContainer from './../current-weather/CurrentWeatherContainer'\r\nimport ForecastContainer from './../forecast/ForecastContainer'\r\nimport emitGA from './../../utils/MiscTrackEvents'\r\nimport './WeatherForecastStyle.scss'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\nimport AlertComponent from '../../components/weather/AlertComponent'\r\nimport {isEmpty} from 'lodash-es'\r\n\r\nconst WeatherForecastContainer = ({\r\n  weatherCurrent,\r\n  weatherForecast,\r\n  alerts,\r\n  address,\r\n  latlong,\r\n}) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const WET_TYPES = ['rain', 'snow', 'sleet', 'hail']\r\n\r\n  // return rain or snow svg image for the above wet types\r\n  const weatherSVG = () => {\r\n    if (weatherCurrent.icon === 'snow') {\r\n      return 'snow'\r\n    }\r\n    return 'rain'\r\n  }\r\n\r\n  const imageBorder = {\r\n    borderTopLeftRadius: '1rem',\r\n    borderTopRightRadius: '1rem',\r\n  }\r\n\r\n  const [showAlerts, setShowAlerts] = useState(true)\r\n\r\n  const toggleWeatherAlerts = () => {\r\n    setShowAlerts(!showAlerts)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className={'flex flex-col justify-center items-center lg:px-5 pt-10'}>\r\n        <div\r\n          className={`sm:w-full lg:w-5/6 xl:max-w-6xl bg-${theme} text-${colorTheme} border border-${colorTheme} md:border-none rounded-t-2xl shadow-lg`}>\r\n          <div className='relative overflow-hidden'>\r\n            <img\r\n              src={`${AssetsSrcURL}/weather-backgrounds/${getWeatherBackground(\r\n                weatherCurrent\r\n              )}.jpg`}\r\n              alt='clear day'\r\n              className='w-full object-cover object-center weather-background'\r\n              style={imageBorder}\r\n            />\r\n            {/* show rain or snow svg only when weather icon exist in WET_TYPES*/}\r\n            <div>\r\n              {WET_TYPES.includes(weatherCurrent.icon) && (\r\n                <img\r\n                  src={`${AssetsSrcURL}/weather-backgrounds/${weatherSVG()}.svg`}\r\n                  alt='clear day'\r\n                  className='w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0 weather-background'\r\n                  style={imageBorder}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* current weather container should be on the image on mobile and small devices */}\r\n            <div\r\n              className='block md:hidden absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={address}\r\n                latlong={latlong}\r\n              />\r\n            </div>\r\n\r\n            {/* current weather and forecast container should be on the image from medium devices */}\r\n            <div\r\n              className='hidden md:block absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={address}\r\n                latlong={latlong}\r\n              />\r\n              <ForecastContainer\r\n                cityName={address.cityName}\r\n                weatherCurrent={weatherCurrent}\r\n                weatherForecast={weatherForecast}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className='block md:hidden'>\r\n            <ForecastContainer\r\n              cityName={address.cityName}\r\n              weatherCurrent={weatherCurrent}\r\n              weatherForecast={weatherForecast}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='relative'>\r\n        <p\r\n          className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n          Powered by&nbsp;\r\n          <a\r\n            href='https://darksky.net/poweredby/'\r\n            target='_blank'\r\n            rel='noreferrer noopener'\r\n            className={`link z-0 font-medium hover:text-${theme}`}\r\n            onClick={() => emitGA('powered-by', 'Dark Sky')}>\r\n            Dark Sky\r\n          </a>\r\n        </p>\r\n\r\n        {/* weather alerts */}\r\n        {!isEmpty(alerts) ? (\r\n          <Fragment>\r\n            <div className='text-center pb-5'>\r\n              <p>\r\n                <button\r\n                  className={`bg-${colorTheme} text-${theme} font-semibold py-3 px-6 rounded-full capitalize`}\r\n                  onClick={toggleWeatherAlerts}>\r\n                  {showAlerts ? 'Hide' : 'View'} Weather Alerts\r\n                </button>\r\n              </p>\r\n            </div>\r\n            <div className='pb-5'>\r\n              {showAlerts ? (\r\n                <Fragment>\r\n                  {alerts.map((alert, index) => {\r\n                    return (\r\n                      <div className='my-2' key={index}>\r\n                        <AlertComponent alert={alert} />\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </Fragment>\r\n              ) : null}\r\n            </div>\r\n          </Fragment>\r\n        ) : null}\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherForecastContainer\r\n"],"sourceRoot":""}