{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["WeatherContainer","addressContext","useContext","AddressContext","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","alerts","setAlerts","isLoading","setIsLoading","isError","setIsError","validCityName","isValid","address","cityName","includes","setWeatherData","current","forecast","fetchWeatherData","a","FetchWeatherData","error","isNil","useEffect","showLoader","latlong","timer","setInterval","clearInterval","loaderText","className","errorMessage"],"mappings":"iPAoIeA,UA3HU,WACvB,IAAMC,EAAiBC,qBAAWC,KAClC,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAQMC,EAAgB,WACpB,GAAIC,YAAQf,EAAegB,SAAU,CACnC,IAAMC,EAAWjB,EAAegB,QAAQC,SACxC,OACEF,YAAQE,KACPA,EAASC,SAAS,eAClBD,EAASC,SAAS,QAGvB,OAAO,GAGHC,EAAiB,SAACC,EAASC,EAAUb,GACrCO,YAAQK,IAAYL,YAAQM,KAC9Bd,EAAkBa,GAClBf,EAAmBgB,GACnBZ,EAAUD,KAIRc,EAAgB,uCAAG,oCAAAC,EAAA,sEAErBZ,GAAa,GAFQ,SAIba,YAAiBxB,GAJJ,gBAGdM,EAHc,EAGdA,eAAgBF,EAHF,EAGEA,gBAAiBI,EAHnB,EAGmBA,OAAQiB,EAH3B,EAG2BA,MAI5CC,YAAMD,IACRN,EAAeb,EAAgBF,EAAiBI,GAEhDK,GAAW,IAEXA,GAAW,GAZQ,kDAerBA,GAAW,GAfU,yBAiBrBF,GAAa,GAjBQ,6EAAH,qDA2CtB,OArBAgB,qBAAU,WACRhB,EAAaX,EAAe4B,cAC3B,CAAC5B,EAAe4B,aAEnBD,qBAAU,WACJZ,YAAQf,EAAe6B,SACzBP,IAEAT,GAAW,GAGb,IAAMiB,EAAQC,aAAY,WACxBT,MACC,MAEH,OAAO,WACLU,cAAcF,MAGf,CAAC9B,EAAe6B,UAGjB,kBAAC,WAAD,KACGnB,EACC,kBAAC,IAAD,CACEuB,WACEnB,IAAa,wCACwBd,EAAegB,QAAQC,SAD/C,iBAET,oEAIR,kBAAC,WAAD,KACGL,EACC,yBAAKsB,UAAU,uBACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEC,aACErB,IAAa,qEACqDd,EAAegB,QAAQC,SAD5E,4BAGPjB,EAAeyB,OACf,+CAOd,kBAAC,WAAD,KA/FDV,YAAQT,GAiGH,kBAAC,IAAD,CACEA,eAAgBA,EAChBF,gBAAiBA,EACjBI,OAAQA,EACRQ,QAAShB,EAAegB,QACxBa,QAAS7B,EAAe6B,UAExB","file":"static/js/9.a0d0497a.chunk.js","sourcesContent":["import React, {useState, useEffect, useContext, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from '../../utils/FetchWeatherData'\r\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport isValid from '../../utils/ValidityChecker'\r\nimport {isNil} from 'lodash-es'\r\n\r\nconst WeatherContainer = () => {\r\n  const addressContext = useContext(AddressContext)\r\n  const [weatherForecast, setWeatherForecast] = useState({})\r\n  const [weatherCurrent, setWeatherCurrent] = useState({})\r\n  const [alerts, setAlerts] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [isError, setIsError] = useState(false)\r\n\r\n  // check whether to show/hide weatherForecastContainer based on weatherCurrent\r\n  const showWeatherForecast = () => {\r\n    return isValid(weatherCurrent)\r\n  }\r\n\r\n  // check whether the cityName is valid\r\n  const validCityName = () => {\r\n    if (isValid(addressContext.address)) {\r\n      const cityName = addressContext.address.cityName\r\n      return (\r\n        isValid(cityName) &&\r\n        !cityName.includes('undefined') &&\r\n        !cityName.includes('null')\r\n      )\r\n    }\r\n    return false\r\n  }\r\n\r\n  const setWeatherData = (current, forecast, alerts) => {\r\n    if (isValid(current) && isValid(forecast)) {\r\n      setWeatherCurrent(current)\r\n      setWeatherForecast(forecast)\r\n      setAlerts(alerts)\r\n    }\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    try {\r\n      setIsLoading(true)\r\n      const {weatherCurrent, weatherForecast, alerts, error} =\r\n        await FetchWeatherData(addressContext)\r\n      // set the weatherCurrent and weatherForecast only when the data is non-empty\r\n      // this way, the old fetched data can be preserved when api call fail or limit exceed\r\n      if (isNil(error)) {\r\n        setWeatherData(weatherCurrent, weatherForecast, alerts)\r\n        // set the error to false state with the above successful weather data fetch\r\n        setIsError(false)\r\n      } else {\r\n        setIsError(true)\r\n      }\r\n    } catch (err) {\r\n      setIsError(true)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // show the loading state when fetching address information using lat & long from addressContext\r\n  useEffect(() => {\r\n    setIsLoading(addressContext.showLoader)\r\n  }, [addressContext.showLoader])\r\n\r\n  useEffect(() => {\r\n    if (isValid(addressContext.latlong)) {\r\n      fetchWeatherData()\r\n    } else {\r\n      setIsError(true)\r\n    }\r\n    // fetch weather data every 60 minutes\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [addressContext.latlong])\r\n\r\n  return (\r\n    <Fragment>\r\n      {isLoading ? (\r\n        <LoaderComponent\r\n          loaderText={\r\n            validCityName()\r\n              ? `Fetching weather forecast for ${addressContext.address.cityName} ðŸ˜Ž`\r\n              : 'Fetching address information using your geolocation coordinates'\r\n          }\r\n        />\r\n      ) : (\r\n        <Fragment>\r\n          {isError ? (\r\n            <div className='flex justify-center'>\r\n              <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                <ErrorComponent\r\n                  errorMessage={\r\n                    validCityName()\r\n                      ? `Something went wrong. Failed to fetch weather forecast for ${addressContext.address.cityName}! ðŸ˜¢`\r\n                      : `${\r\n                          addressContext.error ||\r\n                          'Something went wrong. Please try again!'\r\n                        }`\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Fragment>\r\n              {showWeatherForecast() ? (\r\n                <WeatherForecastContainer\r\n                  weatherCurrent={weatherCurrent}\r\n                  weatherForecast={weatherForecast}\r\n                  alerts={alerts}\r\n                  address={addressContext.address}\r\n                  latlong={addressContext.latlong}\r\n                />\r\n              ) : null}\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherContainer\r\n"],"sourceRoot":""}