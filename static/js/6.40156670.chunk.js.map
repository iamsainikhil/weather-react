{"version":3,"sources":["utils/ValidityChecker.js","components/error/ErrorComponent.js","context/WeatherUnitContext.js","utils/FetchIPAddress.js","context/AddressContext.js","utils/API.js","containers/error-boundary/ErrorBoundaryContainer.js","utils/ValidCityName.js","components/address/AddressComponent.js","components/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js"],"names":["isValid","value","isEmpty","isNil","ErrorComponent","props","theme","useContext","ThemeContext","className","role","errorMessage","showCloseBtn","onClick","closeError","xmlns","viewBox","d","WeatherUnitContext","React","createContext","weatherUnit","WeatherUnitContextProvider","children","useState","setWeatherUnit","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","Provider","updateWeatherUnit","unit","fetchIPAddress","a","axios","get","data","console","error","AddressContext","SPECIAL_COUNTRY_CODES","AddressContextProvider","updateState","state","setState","updateFavorites","showLoader","address","cityName","cityId","latlong","favorites","formatCoords","latitude","longitude","countryCode","includes","context","returnError","updateAddress","hit","API_URL","hits","city","administrative","country","validName","objectID","country_code","toUpperCase","getIPAddress","region","country_name","Latitude","isNaN","Number","Longitude","getAddress","navigator","geolocation","getCurrentPosition","position","coords","getFavorites","this","Component","contextType","propTypes","PropTypes","objectOf","string","array","func","ErrorBoundaryContainer","hasError","eventId","errorInfo","Sentry","scope","setExtras","name","showDelimeter","AddressComponent","selectedAddressIndex","index","addressSelected","colorTheme","IconComponent","type","color","TYPES","search","up","down","SearchComponent","style","backgroundColor","letterSpacing","id","placeholder","onChange","citySearch","onKeyDown","keyPressed","tabIndex","showCaret","caretClicked","showAddresses","axiosRetry","retryDelay","exponentialDelay","retries","AutoCompleteContainer","listRef","createRef","undefined","addresses","scrollOffset","debounceAddress","debounce","getAddresses","searchCity","event","target","toggleAddresses","prevState","setCity","split","Event","category","action","label","keyCodeHandler","e","keyCode","Math","max","current","scrollTo","left","top","behavior","min","length","message","trim","results","map","en","default","lat","lng","handleError","clearState","LoaderComponent","ref","key","WeatherContainer","lazy","FavoritesContainer","HomeContainer","fallback","loaderText"],"mappings":"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","file":"static/js/6.40156670.chunk.js","sourcesContent":["import {isEmpty, isNil} from 'lodash-es'\r\n\r\n/**\r\n * Check if the given value is valid or not\r\n * @param {*} value\r\n * @returns {Boolean}\r\n */\r\nconst isValid = (value) => {\r\n  return !isEmpty(value) && !isNil(value)\r\n}\r\n\r\nexport default isValid\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport './ErrorStyle.scss'\r\n\r\nconst ErrorComponent = (props) => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      className={`w-11/12 sm:w-3/4 md:w-5/6 ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\r\n      role='alert'>\r\n      <span className='w-5/6 block break-words text-sm'>\r\n        {props.errorMessage}\r\n      </span>\r\n      {props.showCloseBtn && (\r\n        <span\r\n          className='absolute top-0 bottom-0 right-0 ml-3 mr-1'\r\n          onClick={props.closeError}>\r\n          <svg\r\n            className='fill-current h-6 w-6 text-red-500 close-icon'\r\n            role='button'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            viewBox='0 0 20 20'>\r\n            <title>Close</title>\r\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\r\n          </svg>\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorComponent\r\n","import React, {useState, useEffect} from 'react'\r\nconst WeatherUnitContext = React.createContext({\r\n  weatherUnit: 'C'\r\n})\r\n\r\nconst WeatherUnitContextProvider = ({children}) => {\r\n  const [weatherUnit, setWeatherUnit] = useState('C')\r\n\r\n  /**\r\n   * @param {String} unit (F | C)\r\n   * @param {String} type (selectUnit | toggle)\r\n   */\r\n  const updateWeatherUnit = unit => {\r\n    setWeatherUnit(unit)\r\n    localStorage.setItem('unit', JSON.stringify(unit))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // store preferred temperature unit in localStorage\r\n    if (!localStorage.getItem('unit')) {\r\n      localStorage.setItem('unit', JSON.stringify('C'))\r\n    } else {\r\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\r\n      {children}\r\n    </WeatherUnitContext.Provider>\r\n  )\r\n}\r\n\r\nexport {WeatherUnitContext, WeatherUnitContextProvider}\r\n","import axios from 'axios'\r\n\r\nconst fetchIPAddress = async () => {\r\n  try {\r\n    const {data} = await axios.get('https://ipapi.co/json')\r\n    return data\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n}\r\n\r\nexport default fetchIPAddress\r\n","import React, {Component} from 'react'\r\nimport {WeatherUnitContext} from './WeatherUnitContext'\r\nimport {PropTypes} from 'prop-types'\r\nimport axios from 'axios'\r\nimport validName from './../utils/ValidCityName'\r\nimport fetchIPAddress from './../utils/FetchIPAddress'\r\nimport API_URL from '../utils/API'\r\nimport isValid from '../utils/ValidityChecker'\r\nimport {isNil} from 'lodash-es'\r\n\r\n// const token = process.env.REACT_APP_IPINFO_TOKEN\r\nconst AddressContext = React.createContext(null)\r\n\r\n/**\r\n * Today, countries that use the Fahrenheit include the United States, Bahamas, Palau,\r\n * Belize, the Cayman Islands, the Federated States of Micronesia,\r\n * the Marshall Islands, and the territories such as Puerto Rico,\r\n * the U.S. Virgin Islands, and Guam.\r\n */\r\nconst SPECIAL_COUNTRY_CODES = [\r\n  'US',\r\n  'BS',\r\n  'PW',\r\n  'BZ',\r\n  'KY',\r\n  'FM',\r\n  'PR',\r\n  'VI',\r\n  'GU',\r\n]\r\n\r\nclass AddressContextProvider extends Component {\r\n  // get weather unit\r\n  static contextType = WeatherUnitContext\r\n\r\n  updateState = (state) => {\r\n    this.setState({...state})\r\n  }\r\n\r\n  updateFavorites = (state) => {\r\n    this.setState({...state})\r\n  }\r\n  state = {\r\n    showLoader: true,\r\n    error: null,\r\n    address: {\r\n      cityName: '',\r\n      cityId: '',\r\n    },\r\n    latlong: null,\r\n    favorites: [],\r\n    updateState: this.updateState,\r\n    updateFavorites: this.updateFavorites,\r\n  }\r\n\r\n  formatCoords = (latitude, longitude) => {\r\n    return `${latitude},${longitude}`\r\n  }\r\n\r\n  updateWeatherUnit = (countryCode) => {\r\n    // update the weatherUnit to 'F' if the countryCode is a special country code\r\n    if (SPECIAL_COUNTRY_CODES.includes(countryCode)) {\r\n      this.context.updateWeatherUnit('F')\r\n    }\r\n  }\r\n\r\n  returnError = () => {\r\n    this.updateState({\r\n      showLoader: false,\r\n      error:\r\n        'Failed to fetch address information for your geolocation. Please search for any city to get weather forecast!!',\r\n    })\r\n  }\r\n\r\n  /**\r\n   * update address using reverse geocoding of Algolia PLaces to obtain city, state, country, cityID\r\n   */\r\n  updateAddress = async (latlong) => {\r\n    let hit = {}\r\n    try {\r\n      const {hits} = (await axios.get(`${API_URL}/address?latlong=${latlong}`))\r\n        .data\r\n      hit = hits[0]\r\n\r\n      if (isValid(hit)) {\r\n        const city = hit.city ? hit.city[0] : ''\r\n        const state = hit.administrative ? hit.administrative[0] : ''\r\n        const country = hit.country ? hit.country : ''\r\n        const cityName = `${validName(city)}${validName(state)}${validName(\r\n          country,\r\n          false\r\n        )}`\r\n        const cityId = hit.objectID ? hit.objectID : ''\r\n        // country_code in hit will be in lowercase\r\n        const countryCode = hit.country_code\r\n          ? hit.country_code.toUpperCase()\r\n          : ''\r\n        this.updateWeatherUnit(countryCode)\r\n        this.updateState({\r\n          showLoader: false,\r\n          error: null,\r\n          address: {\r\n            cityName,\r\n            cityId,\r\n          },\r\n          latlong,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      this.returnError()\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get ip and city info using ip-api\r\n   * update the address\r\n   */\r\n  getIPAddress = async () => {\r\n    try {\r\n      const data = await fetchIPAddress()\r\n      if (isValid(data)) {\r\n        const {latitude, longitude, city, region, country_name, country_code} =\r\n          data\r\n        const cityName = `${city}, ${region}, ${country_name}`\r\n        this.updateWeatherUnit(country_code)\r\n\r\n        // check whether latitude and longitude are strings which are NaN as well as if value is null or undefined\r\n        const Latitude =\r\n          isNil(latitude) || isNaN(Number(latitude)) ? '00' : latitude\r\n        const Longitude =\r\n          isNil(longitude) || isNaN(Number(longitude)) ? '00' : longitude\r\n        this.updateState({\r\n          showLoader: false,\r\n          error: null,\r\n          address: {\r\n            cityName,\r\n          },\r\n          latlong: this.formatCoords(Latitude, Longitude),\r\n        })\r\n      } else {\r\n        this.updateState({showLoader: false, error: null})\r\n      }\r\n    } catch (error) {\r\n      this.returnError()\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  getAddress = async () => {\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const latlong = this.formatCoords(\r\n            position.coords.latitude,\r\n            position.coords.longitude\r\n          )\r\n          this.updateAddress(latlong)\r\n        },\r\n        (error) => {\r\n          console.error(error)\r\n          this.getIPAddress()\r\n        }\r\n      )\r\n    } else {\r\n      this.getIPAddress()\r\n    }\r\n  }\r\n\r\n  getFavorites = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      this.setState({\r\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))],\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAddress()\r\n    // update favorites for the initial application load\r\n    this.getFavorites()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AddressContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AddressContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport {AddressContext, AddressContextProvider}\r\n\r\nAddressContext.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  favorites: PropTypes.array,\r\n  updateState: PropTypes.func,\r\n  updateFavorites: PropTypes.func,\r\n}\r\n","/**\r\n * weather react serverless API functions URL\r\n */\r\n// const isProduction = process.env.NODE_ENV === 'production'\r\n// /**\r\n//  * update the URLs to point to your Back-end project deployed URL\r\n//  * weather-react-api has access-control-origin restricted to iamsainikhil.com\r\n//  * all the requests initiated from any other domain (including localhost) will be rejected!\r\n//  */\r\n\r\n// export default isProduction\r\n//   ? 'https://weather-react-api.now.sh'\r\n//   : 'https://weather-react-api-dev.now.sh'\r\n\r\nexport default '/api'\r\n","import React, {Component} from 'react'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nexport class ErrorBoundaryContainer extends Component {\r\n  state = {\r\n    hasError: false,\r\n    eventId: null,\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return {hasError: true}\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    Sentry.withScope((scope) => {\r\n      scope.setExtras(errorInfo)\r\n      const eventId = Sentry.captureException(error)\r\n      this.setState({eventId})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.hasError ? (\r\n          <div className='flex'>\r\n            <div className='w-1/6'></div>\r\n            <div className='flex-col w-2/3 justify-center text-center'>\r\n              <ErrorComponent\r\n                errorMessage={'Something went wrong. Reload the page!'}\r\n              />\r\n              <button\r\n                className='font-semibold py-3 px-6 rounded-full capitalize text-sun'\r\n                onClick={() =>\r\n                  Sentry.showReportDialog({eventId: this.state.eventId})\r\n                }>\r\n                Report feedback\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorBoundaryContainer\r\n","import isValid from './ValidityChecker'\r\n\r\n/**\r\n * util func to check and return the valid name\r\n * @param {*} name (city or state or country)\r\n * @param {*} showDelimeter (false for country)\r\n */\r\nconst validName = (name, showDelimeter = true) => {\r\n  return isValid(name) ? `${name}${showDelimeter ? ', ' : ''}` : ''\r\n}\r\n\r\nexport default validName\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst AddressComponent = ({\r\n  address,\r\n  selectedAddressIndex,\r\n  index,\r\n  addressSelected,\r\n}) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  return (\r\n    <p\r\n      className={`px-5 py-1 cursor-pointer item hover:text-${theme} hover:bg-${colorTheme} ${\r\n        index === selectedAddressIndex\r\n          ? `text-${theme} bg-${colorTheme}`\r\n          : `text-${colorTheme}`\r\n      }`}\r\n      onClick={addressSelected}>\r\n      {address.cityName}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AddressComponent\r\n\r\nAddressComponent.propTypes = {\r\n  addressSelected: PropTypes.func,\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  selectedAddressIndex: PropTypes.number,\r\n  index: PropTypes.number,\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FiSearch} from 'react-icons/fi'\r\nimport {IoIosArrowUp, IoIosArrowDown} from 'react-icons/io'\r\n\r\nconst IconComponent = ({type, color}) => {\r\n  const TYPES = {\r\n    search: <FiSearch />,\r\n    up: <IoIosArrowUp />,\r\n    down: <IoIosArrowDown />,\r\n  }\r\n  return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\r\n}\r\n\r\nconst SearchComponent = (props) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  return (\r\n    <div className='h-12 mx-5 mt-5'>\r\n      <div className='relative'>\r\n        <div className='absolute top-0 left-0 ml-5 mt-3'>\r\n          <IconComponent type='search' color={colorTheme} />\r\n        </div>\r\n        <input\r\n          style={{\r\n            backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\r\n            letterSpacing: '0.05em',\r\n          }}\r\n          className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-6 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate text-${colorTheme}`}\r\n          id='grid-first-name'\r\n          type='text'\r\n          placeholder='Type city name to find weather forecast'\r\n          onChange={props.citySearch}\r\n          onKeyDown={props.keyPressed}\r\n          tabIndex='0'\r\n          value={props.city}\r\n        />\r\n        {props.showCaret ? (\r\n          <div\r\n            className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\r\n            onClick={props.caretClicked}>\r\n            {props.showAddresses ? (\r\n              <IconComponent type='up' color={colorTheme} />\r\n            ) : (\r\n              <IconComponent type='down' color={colorTheme} />\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchComponent\r\n\r\nSearchComponent.propTypes = {\r\n  city: PropTypes.string,\r\n  cityName: PropTypes.string,\r\n  showCaret: PropTypes.bool,\r\n  showAddresses: PropTypes.bool,\r\n  caretClicked: PropTypes.func,\r\n}\r\n","import React, {Component, Fragment} from 'react'\r\nimport axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport './AutoCompleteStyle.scss'\r\nimport AddressComponent from '../../components/address/AddressComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport SearchComponent from '../../components/search/SearchComponent'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport validName from '../../utils/ValidCityName'\r\nimport API_URL from './../../utils/API'\r\nimport isValid from '../../utils/ValidityChecker'\r\nimport {debounce, isNil} from 'lodash-es'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay, retries: 1})\r\n\r\nclass AutoCompleteContainer extends Component {\r\n  static contextType = AddressContext\r\n  listRef = React.createRef(undefined)\r\n  state = {\r\n    showCaret: false,\r\n    showAddresses: false,\r\n    showLoader: false,\r\n    city: '',\r\n    addresses: [],\r\n    selectedAddressIndex: 0,\r\n    scrollOffset: 0,\r\n    errorMessage: '',\r\n  }\r\n\r\n  handleError(message) {\r\n    this.setState({errorMessage: message})\r\n  }\r\n\r\n  // debounced function\r\n  debounceAddress = debounce(this.getAddresses, 1000)\r\n\r\n  searchCity = (event) => {\r\n    this.setState({city: event.target.value, errorMessage: ''})\r\n    this.debounceAddress()\r\n  }\r\n\r\n  // fetch valid matched addresses for searched city\r\n  async getAddresses() {\r\n    // check for empty city value since deleting city value character by character will trigger the debounceAddress\r\n    // city value could be empty when this function run\r\n    // so this extra check will fix the bug of showing addresses list when there is no city name\r\n    if (this.state.city.trim()) {\r\n      try {\r\n        this.setState({showLoader: true})\r\n        // the below latlong check is just a workaround for accessing correct api route\r\n        // otherwise, no matter how good the city name is, when latlong is empty user will get 404 since there is no route without latlong on the api server\r\n        const latlong =\r\n          !isNil(this.context.latlong) && !isNaN(Number(this.context.latlong))\r\n            ? this.context.latlong\r\n            : '00,00'\r\n\r\n        const {hits} = (\r\n          await axios.get(\r\n            `${API_URL}/places?city=${this.state.city}&latlong=${latlong}`\r\n          )\r\n        ).data\r\n\r\n        // populate addresses and show them if matching cities exist\r\n        if (isValid(hits)) {\r\n          const results = hits.map((hit) => {\r\n            // city value lives in default array of locale_names\r\n            const city = `${\r\n              hit['locale_names'].en\r\n                ? hit['locale_names'].en[0]\r\n                : hit['locale_names'].default[0]\r\n            }`\r\n            // state value lives in administrative array\r\n            const state = `${hit.administrative ? hit.administrative[0] : ''}`\r\n            // country value lives in country object in different languages and gran the \"en\" version if available or else the default version\r\n            const country = `${\r\n              hit.country.en ? hit.country.en : hit.country.default\r\n            }`\r\n\r\n            // prettier-ignore\r\n            const cityName = `${validName(city)}${validName(state)}${validName(country, false)}`\r\n            const {lat, lng} = hit['_geoloc']\r\n            return {\r\n              cityName: cityName,\r\n              cityId: hit.objectID,\r\n              latlong: `${lat},${lng}`,\r\n            }\r\n          })\r\n          // results is an array of `address` objects with cityName, objectID, and latlong properties\r\n          this.setState({\r\n            addresses: results,\r\n            showCaret: true,\r\n            showAddresses: true,\r\n            errorMessage: '',\r\n          })\r\n        } else {\r\n          this.setState({showAddresses: false})\r\n          this.handleError(\r\n            'No matching cities found. Try searching with a valid city name!'\r\n          )\r\n        }\r\n      } catch (error) {\r\n        this.handleError(\r\n          'Something went wrong. Please try again or search with a different city name!'\r\n        )\r\n      } finally {\r\n        this.setState({showLoader: false, selectedAddressIndex: 0})\r\n      }\r\n    } else {\r\n      this.clearState()\r\n    }\r\n  }\r\n\r\n  toggleAddresses = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        showAddresses: !prevState.showAddresses,\r\n      }\r\n    })\r\n  }\r\n\r\n  setCity = async (address) => {\r\n    if (address) {\r\n      // set city to just have cityName excluding state and country in the search input\r\n      // 'Herndon, Virginia, United States' -> 'Herndon'\r\n      this.setState({\r\n        city: address.cityName.split(',')[0],\r\n        showAddresses: false,\r\n      })\r\n      // // track this cityName to GA\r\n      Event({\r\n        category: 'Address',\r\n        action: 'City Search',\r\n        label: address.cityName,\r\n      })\r\n\r\n      this.context.updateState({\r\n        address: address,\r\n        latlong: address.latlong,\r\n      })\r\n    }\r\n  }\r\n\r\n  keyCodeHandler = (e) => {\r\n    if (e.keyCode) {\r\n      if (e.keyCode === 38) {\r\n        // up arrow\r\n        this.setState((prevState) => {\r\n          return {\r\n            selectedAddressIndex: Math.max(\r\n              0,\r\n              prevState.selectedAddressIndex - 1\r\n            ),\r\n          }\r\n        })\r\n        // scroll up inside the address list corresponding to up/down arrow key\r\n        this.listRef.current.scrollTo({\r\n          left: 0,\r\n          top:\r\n            this.state.selectedAddressIndex < 6\r\n              ? 0\r\n              : this.state.selectedAddressIndex * 30,\r\n          behavior: 'auto',\r\n        })\r\n      } else if (e.keyCode === 40) {\r\n        // down arrow\r\n        this.setState((prevState) => {\r\n          return {\r\n            selectedAddressIndex: Math.min(\r\n              prevState.selectedAddressIndex + 1,\r\n              this.state.addresses.length - 1\r\n            ),\r\n          }\r\n        })\r\n        // scroll down inside the address list corresponding to up/down arrow key\r\n        this.listRef.current.scrollTo({\r\n          left: 0,\r\n          top: this.state.selectedAddressIndex * 30,\r\n          behavior: 'auto',\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  clearState() {\r\n    this.setState({\r\n      showCaret: false,\r\n      showAddresses: false,\r\n      showLoader: false,\r\n      addresses: [],\r\n      selectedAddressIndex: 0,\r\n      errorMessage: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className='flex justify-center mt-5'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            <SearchComponent\r\n              city={this.state.city}\r\n              showCaret={this.state.showCaret}\r\n              showAddresses={this.state.showAddresses}\r\n              citySearch={this.searchCity}\r\n              keyPressed={this.keyCodeHandler}\r\n              caretClicked={this.toggleAddresses}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='flex justify-center'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            {this.state.showLoader ? (\r\n              <LoaderComponent />\r\n            ) : (\r\n              this.state.showAddresses && (\r\n                <div\r\n                  className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'\r\n                  ref={this.listRef}>\r\n                  {this.state.addresses.map((address, index) => {\r\n                    return (\r\n                      <AddressComponent\r\n                        address={address}\r\n                        selectedAddressIndex={this.state.selectedAddressIndex}\r\n                        index={index}\r\n                        key={index}\r\n                        addressSelected={() => this.setCity(address)}\r\n                      />\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            )}\r\n            {this.state.errorMessage.length > 0 && (\r\n              <div className='flex justify-center'>\r\n                <div className='w-5/6'>\r\n                  <ErrorComponent\r\n                    errorMessage={this.state.errorMessage}\r\n                    showCloseBtn={true}\r\n                    closeError={() => {\r\n                      this.setState({errorMessage: ''})\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoCompleteContainer\r\n","import React, {Component, Suspense, lazy, Fragment} from 'react'\r\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport {AddressContextProvider} from '../../context/AddressContext'\r\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\r\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\r\n\r\nexport class HomeContainer extends Component {\r\n  static contextType = ThemeContext\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <WeatherUnitContextProvider>\r\n          <AddressContextProvider>\r\n            <AutoCompleteContainer />\r\n            <ErrorBoundaryContainer>\r\n              <Suspense\r\n                fallback={\r\n                  <LoaderComponent loaderText={'Loading weather forecast UI'} />\r\n                }>\r\n                <WeatherContainer />\r\n                <FavoritesContainer />\r\n              </Suspense>\r\n            </ErrorBoundaryContainer>\r\n          </AddressContextProvider>\r\n        </WeatherUnitContextProvider>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomeContainer\r\n"],"sourceRoot":""}